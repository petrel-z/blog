var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
function La51Plugin(options) {
  let resolveConfig;
  let vitepressConfig;
  const { apply = "build" } = options;
  const pluginOps = __spreadProps(__spreadValues({
    name: "vitepress-plugin-51la",
    enforce: "pre"
  }, apply === "all" ? {} : { apply }), {
    configResolved(config) {
      if (resolveConfig) {
        return;
      }
      resolveConfig = config;
      vitepressConfig = config.vitepress;
      if (!vitepressConfig) {
        return;
      }
      const selfTransformPageData = vitepressConfig.transformPageData;
      vitepressConfig.transformPageData = (pageData, ctx) => __async(this, null, function* () {
        var _a, _b;
        (_b = (_a = pageData.frontmatter).head) != null ? _b : _a.head = [];
        pageData.frontmatter.head.push(...get51LaScriptHead(options));
        return selfTransformPageData == null ? void 0 : selfTransformPageData(pageData, ctx);
      });
    }
  });
  return pluginOps;
}
function get51LaScriptHead(options) {
  const { id, ck, importMode = "sync", autoTrack = false, hashMode = true, screenRecord = false, sdk = "//sdk.51.la/js-sdk-pro.min.js", prefix } = options;
  if (!id || !ck) {
    return [];
  }
  const config = JSON.parse(JSON.stringify(__spreadValues({
    id,
    ck
  }, {
    autoTrack: autoTrack || void 0,
    hashMode: hashMode || void 0,
    screenRecord: screenRecord || void 0,
    prefix
  })));
  if (importMode === "async") {
    return [
      [
        "script",
        {},
        `!function(p){"use strict";!function(t){var s=window,e=document,i=p,c="".concat("https:"===e.location.protocol?"https://":"http://","${sdk.replace(/^.*\/\//, "")}"),n=e.createElement("script"),r=e.getElementsByTagName("script")[0];n.type="text/javascript",n.setAttribute("charset","UTF-8"),n.async=!0,n.src=c,n.id="LA_COLLECT",i.d=n;var o=function(){s.LA.ids.push(i)};s.LA?s.LA.ids&&o():(s.LA=p,s.LA.ids=[],o()),r.parentNode.insertBefore(n,r)}()}(${JSON.stringify(config)});`
      ]
    ];
  }
  if (importMode === "old") {
    return [
      [
        "script",
        {
          charset: "UTF-8",
          id: "LA_COLLECT",
          src: `${sdk}?${new URLSearchParams(config).toString()}`
        }
      ]
    ];
  }
  return [
    [
      "script",
      {
        charset: "UTF-8",
        id: "LA_COLLECT",
        src: sdk
      }
    ],
    [
      "script",
      {},
      `typeof LA !== 'undefined' && LA.init(${JSON.stringify(config)})`
    ]
  ];
}
export {
  La51Plugin,
  get51LaScriptHead
};
